/* SPDX-License-Identifier: GPL-2.0 */
/* Generated by Documentation/scheduler/sched-pelt; do not modify. */

/**
 *  衰减系数            
 *                          2^32
 *                     A *(------)
 *  A     2^32 * A            B
 * --- = ---------- = ----------
 *  B     2^32 * B       2^32
 *
 *  本数组 的 32 个下标对应  0~32ms 的负载贡献的衰减因子。
 *
 *  例：
 *  ---------------------------------
 *  假设当前的 进程的负载贡献度 为 100, 要求计算过去 第 32ms 的负载，
 *  首先查表得到过去 32ms 的衰减因子 runnable_avg_yN_inv[31]. 
 *  计算公式为：
 *
 *  Load = (100*runnable_avg_yN_inv[31]>>32) = 51 
 *
 *  上式 见 `decay_load()`
 */
static const u32 __maybe_unused runnable_avg_yN_inv[LOAD_AVG_PERIOD]  = {
	0xffffffff, 0xfa83b2da, 0xf5257d14, 0xefe4b99a, 0xeac0c6e6, 0xe5b906e6,
	0xe0ccdeeb, 0xdbfbb796, 0xd744fcc9, 0xd2a81d91, 0xce248c14, 0xc9b9bd85,
	0xc5672a10, 0xc12c4cc9, 0xbd08a39e, 0xb8fbaf46, 0xb504f333, 0xb123f581,
	0xad583ee9, 0xa9a15ab4, 0xa5fed6a9, 0xa2704302, 0x9ef5325f, 0x9b8d39b9,
	0x9837f050, 0x94f4efa8, 0x91c3d373, 0x8ea4398a, 0x8b95c1e3, 0x88980e80,
	0x85aac367, 0x82cd8698,
};

#if __before_linux_4_12_____________________
/*
 * Precomputed \Sum y^k { 1<=k<=n }.  These are floor(true_value) to prevent
 * over-estimates when re-combining.
 *
 * runnable_avg_yN_sum[] = 1024(y + y^2 + y^3 + ... + y^n)
 */
static const u32 runnable_avg_yN_sum[] = {
	    0, 1002, 1982, 2941, 3880, 4798, 5697, 6576, 7437, 8279, 9103,
	 9909,10698,11470,12226,12966,13690,14398,15091,15769,16433,17082,
	17718,18340,18949,19545,20128,20698,21256,21802,22336,22859,23371,
};
#endif //__before_linux_4_12_____________________


#define LOAD_AVG_PERIOD 32

/**
 *  表示在 无限个周期里，历史累计衰减时间的最大值是多少。
 *  
 */
#define LOAD_AVG_MAX 47742
